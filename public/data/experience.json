{
    "Relativity Space":{
        "full": "Relativity Space",
        "short": "relativity",
        "img": "./relativity-logo.svg",
        "position": "Software Engineer Intern",
        "tech": ["Docker", "Python", "Rust", "React + Vite", "TypeScript", "GitLab CI"], 
        "startDate":"May 2024",
        "endDate":"Present",
        "skills":["cunting"],
        "summary": "Developed evaluators for HITL and HOOTL testing.",
        "description":"In August 2022, I embarked on a rewarding journey as a Teaching Assistant for Advanced Programming in C at Columbia University's Computer Science Department. This role provided me with the unique opportunity to support and mentor over 800 students in their programming endeavors. My responsibilities were extensive, encompassing assistance with programming languages such as C, BASH, and UNIX, as well as TCP/IP networking. I offered this support through multiple channels, including email consultations, weekly office hours, and leading two comprehensive review sessions. These interactions allowed me to provide personalized guidance, helping students overcome their challenges and deepening their understanding of complex programming concepts.\n\nEarly on, I recognized the need for practical and accessible learning resources to enhance student proficiency. To address this, I collaborated closely with instructors and course staff to develop a series of comprehensive guides. These guides, which were made available on GitHub, covered essential topics such as effective Vim use and SSH-key generation practices. This collaborative effort resulted in a significant increase in student proficiency, with a noted 40% improvement in key technical skills. By providing these resources, we ensured that students had the necessary tools to succeed in their coursework and future careers.\n\nA significant challenge I encountered was the manual and time-consuming grading process for a large number of code submissions. To streamline this process and enhance efficiency, I developed an automated Python grading script. This script was designed to handle the grading of approximately 400 code submissions, optimizing the process by about 75%. The automation not only sped up the grading process but also significantly increased grade accuracy and consistency. This innovation ensured that students received timely and fair assessments, allowing them to focus on learning and improvement.\n\nMy role as a Teaching Assistant wasn't confined to technical support alone. I actively participated in the development of the course curriculum and worked closely with instructors to ensure that the course content was aligned with the latest industry standards. This experience honed my ability to communicate complex technical concepts to a diverse group of students, ensuring that the solutions I provided were both effective and comprehensible.\n\nWorking as a Teaching Assistant at Columbia University has been an incredibly rewarding experience, providing me with a unique perspective on the intersection of education and technology. It has also equipped me with valuable skills in technical support, resource development, and process automation, all of which are crucial for handling large-scale educational tasks. The knowledge and experience I gained here have laid a strong foundation for my future endeavors in software engineering and beyond."
    },
    "NASA Jet Propulsion Lab":{
        "full": "NASA Jet Propulsion Lab",
        "short": "jpl",
        "img": "./nasa-logo.svg",
        "position": "Backend Software Engineer Intern",
        "tech": ["Docker", "Python", "Linux"],
        "startDate": "November 2022",
        "endDate": "May 2024",
        "skills":["cunting"],
        "summary":"Worked on backend team to develop data retrieval applcation.",
        "description": "In November 2022, I joined the NASA Jet Propulsion Lab as a Full-Year Software Engineer Intern working part-time while in school. I worked with a team of about 5 senior software engineers on the backend for TOSCA, an application which streamlines the process of data retrieval from NASA’s satellites. The problem that NASA/JPL faced was that the process of retrieving data and putting it into a format that is useful for researches typically required hiring a  Data Scientist or someone with a background in software. Since there was no centralized platform or application for researchers to receive and understand the millions of GB’s of data that NASA Satellites were collecting, the process was extremely slow, ineffective, and costly. TOSCA is a solution that I helped ideate and develop.\n\nWhen I first joined the team, most of the code was not yet written, we simply had ideas and guidelines for what we wanted TOSCA to do and what technologies we would use to do it but that was abut it. Most of the technologies I had never used before, so I had to learn along the way and be comfortable with learning it by myself or reaching out to my team for help. My primary responsibility was to develop the tools that actually read from NASA databases and received binary data. I was able to efficiently handle large volumes of data spread across thousands of files through leveraging Python and AWS tools. Once we were able to get the application to actually read the data, I also contributed to the processes which extrapolate data to maps and human-readable forms. \n\nOnce we were able to read the data, I was also tasked with developing the solution to scale the platform such that the application could take hundreds of requests and thousands of gigabytes of data without overloading our servers. I designed and implemented containerization strategies that allowed for the efficient handling of large jobs and jobs to run concurrently. By utilizing Docker, I was able to reduce server load and ensure that our systems remained responsive and reliable even under heavy data processing demands.\n\nMy role at NASA JPL wasn't confined to technical development alone. I actively participated in cross-functional meetings, collaborating with scientists, engineers, and other stakeholders to understand their requirements and translate them into technical solutions. This experience honed my ability to communicate complex technical concepts to non-technical audiences and ensured that the solutions I developed were aligned with the broader mission objectives.\n\nWorking at NASA JPL has been an enriching experience, I was able to learn several coding languages and technologies. It has also equipped me with valuable skills in backend development, data visualization, and containerization, all of which are crucial for handling large-scale scientific data. The knowledge and experience I gained here have laid a strong foundation for my future endeavors in software engineering and beyond."
    }, 
    "Columbia University":{
        "full": "Columbia University",
        "short": "columbia",
        "img": "./columbia-logo.svg",
        "position": "Course Assistant for Advanced Programming in C",
        "tech": ["C", "BASH", "GitHub", "TCP/IP Socket Programming", "Python"],
        "startDate": "November 2022",
        "endDate": "May 2024",
        "skills":["cunting"],
        "summary": "Supported over 800 students in developing in C, BASH, UNIX, and TCP/IP networking through office hours and recitation.",
        "description": "During my year as a teaching assistant for Advanced Programming in C at Columbia, I realized that the ability to effectively communicate and teach code is just as important as knowing how to write code. Throughout my time at Columbia, most of my coding assignments and projects were done alone. As long as it compiled and ran as expected, you would be rewarded. However, working as a TA really tested my understanding of the assignments and concepts which I thought I knew well, as I needed to understand exactly why code works and how it works.\n\nThroughout the year, I was able to work with over 800 students, 30 other TA’s, and two professors: John Hui and Dr. Brian Borowski. My responsibilities were extensive offering assistance to students on topics like C, BASH, UNIX, and TCP/IP socket programming. I would hold weekly office hours, plan and conduct review sessions throughout the semesters, and maintaining the inbox to for the class LISTERV.\n\nI recognized that amongst students there was a need for practical and accessible resources to help students challenge and their deepen their understanding of complex programming concepts. To address this, I collaborated closely with instructors and fellow TA’s to develop a series of comprehensive guides which are still used to this day. These guides touch on topics that are important for software development beyond the materials in the class such as Vim-use, GitHub, and safe SSH-key generation and practices. This effort resulted in a significant increase in student proficiency which I saw even from just looking at students code in office hours and the number of emails we got about merge-conflicts. \n\nAs a TA, I also played a large role in the logistical planning and coordination required when working with 400 students a semester. A significant challenge was gardening assignments, I collaborated with the other TA’s and was able to develop an automated Python and BASH script which streamlined the grading process increasing the speed in which we could return graded assignments back to students as well as increasing accuracy and consistency amongst submissions. \n\nThis experience honed my ability to communicate complex technical concepts to a diverse group of students varying in proficiency, ensuring that assistance I provided were effective and comprehensible. Working as a TA was an incredibly rewarding experience that equipped me with valuable skills in technical support, resource development, and administrative tasks. The knowledge and experience I gained have laid a strong foundation for my future endeavors in software engineering."
    }
}
   
  