{
    "Relativity Space":{
        "full": "Relativity Space",
        "short": "relativity",
        "img": "./relativity-logo.svg",
        "position": "Software Engineer Intern",
        "tech": ["Docker", "Python", "Rust", "React + Vite", "TypeScript", "GitLab CI"], 
        "startDate":"May 2024",
        "endDate":"Present",
        "skills":["cunting"],
        "summary": "Developed evaluators for HITL and HOOTL testing.",
        "description":"In August 2022, I embarked on a rewarding journey as a Teaching Assistant for Advanced Programming in C at Columbia University's Computer Science Department. This role provided me with the unique opportunity to support and mentor over 800 students in their programming endeavors. My responsibilities were extensive, encompassing assistance with programming languages such as C, BASH, and UNIX, as well as TCP/IP networking. I offered this support through multiple channels, including email consultations, weekly office hours, and leading two comprehensive review sessions. These interactions allowed me to provide personalized guidance, helping students overcome their challenges and deepening their understanding of complex programming concepts.\n\nEarly on, I recognized the need for practical and accessible learning resources to enhance student proficiency. To address this, I collaborated closely with instructors and course staff to develop a series of comprehensive guides. These guides, which were made available on GitHub, covered essential topics such as effective Vim use and SSH-key generation practices. This collaborative effort resulted in a significant increase in student proficiency, with a noted 40% improvement in key technical skills. By providing these resources, we ensured that students had the necessary tools to succeed in their coursework and future careers.\n\nA significant challenge I encountered was the manual and time-consuming grading process for a large number of code submissions. To streamline this process and enhance efficiency, I developed an automated Python grading script. This script was designed to handle the grading of approximately 400 code submissions, optimizing the process by about 75%. The automation not only sped up the grading process but also significantly increased grade accuracy and consistency. This innovation ensured that students received timely and fair assessments, allowing them to focus on learning and improvement.\n\nMy role as a Teaching Assistant wasn't confined to technical support alone. I actively participated in the development of the course curriculum and worked closely with instructors to ensure that the course content was aligned with the latest industry standards. This experience honed my ability to communicate complex technical concepts to a diverse group of students, ensuring that the solutions I provided were both effective and comprehensible.\n\nWorking as a Teaching Assistant at Columbia University has been an incredibly rewarding experience, providing me with a unique perspective on the intersection of education and technology. It has also equipped me with valuable skills in technical support, resource development, and process automation, all of which are crucial for handling large-scale educational tasks. The knowledge and experience I gained here have laid a strong foundation for my future endeavors in software engineering and beyond."
    },
    "NASA Jet Propulsion Lab":{
        "full": "NASA Jet Propulsion Lab",
        "short": "jpl",
        "img": "./nasa-logo.svg",
        "position": "Backend Software Engineer Intern",
        "tech": ["Docker", "Python", "Linux"],
        "startDate": "November 2022",
        "endDate": "May 2024",
        "skills":["cunting"],
        "summary":"Worked on backend team to develop data retrieval applcation.",
        "description": "In November 2022, I joined the NASA Jet Propulsion Lab as a Full-Year Software Engineer Intern. This opportunity allowed me to dive into the fascinating world of space exploration and contribute to critical backend development projects. My primary responsibility was to develop a robust Python-based backend application aimed at optimizing the retrieval of extensive datasets from NASA databases. Leveraging AWS tools, I was able to efficiently handle large volumes of data, utilizing Amazon S3 for seamless data storage and management.\n\nEarly in my tenure, I identified the need for enhanced data visualization capabilities to better support the scientific community. To address this, I implemented a sophisticated data visualization feature that generated mask files and plots based on user-requested variables and data. Using MatPlotLib and NumPy libraries, I ensured that the visualizations were not only accurate but also user-friendly, enabling researchers to draw meaningful insights from their data.\n\nA significant challenge I encountered was the need to manage and process large datasets without overloading our servers. To mitigate this, I designed and implemented containerization strategies that allowed for the efficient handling of large jobs. By utilizing Docker, I was able to reduce server load and ensure that our systems remained responsive and reliable even under heavy data processing demands.\n\nMy role at NASA JPL wasn't confined to technical development alone. I actively participated in cross-functional meetings, collaborating with scientists, engineers, and other stakeholders to understand their requirements and translate them into technical solutions. This experience honed my ability to communicate complex technical concepts to non-technical audiences and ensured that the solutions I developed were aligned with the broader mission objectives.\n\nWorking at NASA JPL has been an incredibly rewarding experience, providing me with a unique perspective on the intersection of technology and space exploration. It has also equipped me with valuable skills in backend development, data visualization, and containerization, all of which are crucial for handling large-scale scientific data. The knowledge and experience I gained here have laid a strong foundation for my future endeavors in software engineering and beyond."
    }, 
    "Columbia University":{
        "full": "Columbia University",
        "short": "columbia",
        "img": "./columbia-logo.svg",
        "position": "Course Assistant for Advanced Programming in C",
        "tech": ["C", "BASH", "GitHub", "TCP/IP Socket Programming", "Python"],
        "startDate": "November 2022",
        "endDate": "May 2024",
        "skills":["cunting"],
        "summary": "Supported over 800 students in developing in C, BASH, UNIX, and TCP/IP networking through office hours and recitation.",
        "description": "In August 2022, I embarked on a rewarding journey as a Teaching Assistant for Advanced Programming in C at Columbia University's Computer Science Department. This role provided me with the unique opportunity to support and mentor over 800 students in their programming endeavors. My responsibilities were extensive, encompassing assistance with programming languages such as C, BASH, and UNIX, as well as TCP/IP networking. I offered this support through multiple channels, including email consultations, weekly office hours, and leading two comprehensive review sessions. These interactions allowed me to provide personalized guidance, helping students overcome their challenges and deepening their understanding of complex programming concepts.\n\nEarly on, I recognized the need for practical and accessible learning resources to enhance student proficiency. To address this, I collaborated closely with instructors and course staff to develop a series of comprehensive guides. These guides, which were made available on GitHub, covered essential topics such as effective Vim use and SSH-key generation practices. This collaborative effort resulted in a significant increase in student proficiency, with a noted 40% improvement in key technical skills. By providing these resources, we ensured that students had the necessary tools to succeed in their coursework and future careers.\n\nA significant challenge I encountered was the manual and time-consuming grading process for a large number of code submissions. To streamline this process and enhance efficiency, I developed an automated Python grading script. This script was designed to handle the grading of approximately 400 code submissions, optimizing the process by about 75%. The automation not only sped up the grading process but also significantly increased grade accuracy and consistency. This innovation ensured that students received timely and fair assessments, allowing them to focus on learning and improvement.\n\nMy role as a Teaching Assistant wasn't confined to technical support alone. I actively participated in the development of the course curriculum and worked closely with instructors to ensure that the course content was aligned with the latest industry standards. This experience honed my ability to communicate complex technical concepts to a diverse group of students, ensuring that the solutions I provided were both effective and comprehensible.\n\nWorking as a Teaching Assistant at Columbia University has been an incredibly rewarding experience, providing me with a unique perspective on the intersection of education and technology. It has also equipped me with valuable skills in technical support, resource development, and process automation, all of which are crucial for handling large-scale educational tasks. The knowledge and experience I gained here have laid a strong foundation for my future endeavors in software engineering and beyond."
    }
}
   
  